/* automatically generated by rust-bindgen 0.71.1 */

pub type logger_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_uint,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> bool,
>;
pub const EVENT_HOOK_ENABLED: _event_type = 1;
pub const EVENT_HOOK_DISABLED: _event_type = 2;
pub const EVENT_KEY_TYPED: _event_type = 3;
pub const EVENT_KEY_PRESSED: _event_type = 4;
pub const EVENT_KEY_RELEASED: _event_type = 5;
pub const EVENT_MOUSE_CLICKED: _event_type = 6;
pub const EVENT_MOUSE_PRESSED: _event_type = 7;
pub const EVENT_MOUSE_RELEASED: _event_type = 8;
pub const EVENT_MOUSE_MOVED: _event_type = 9;
pub const EVENT_MOUSE_DRAGGED: _event_type = 10;
pub const EVENT_MOUSE_WHEEL: _event_type = 11;
pub type _event_type = ::std::os::raw::c_uint;
pub use self::_event_type as event_type;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _screen_data {
    pub number: u8,
    pub x: i16,
    pub y: i16,
    pub width: u16,
    pub height: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _screen_data"][::std::mem::size_of::<_screen_data>() - 10usize];
    ["Alignment of _screen_data"][::std::mem::align_of::<_screen_data>() - 2usize];
    ["Offset of field: _screen_data::number"]
        [::std::mem::offset_of!(_screen_data, number) - 0usize];
    ["Offset of field: _screen_data::x"][::std::mem::offset_of!(_screen_data, x) - 2usize];
    ["Offset of field: _screen_data::y"][::std::mem::offset_of!(_screen_data, y) - 4usize];
    ["Offset of field: _screen_data::width"][::std::mem::offset_of!(_screen_data, width) - 6usize];
    ["Offset of field: _screen_data::height"]
        [::std::mem::offset_of!(_screen_data, height) - 8usize];
};
pub type screen_data = _screen_data;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _keyboard_event_data {
    pub keycode: u16,
    pub rawcode: u16,
    pub keychar: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _keyboard_event_data"][::std::mem::size_of::<_keyboard_event_data>() - 6usize];
    ["Alignment of _keyboard_event_data"][::std::mem::align_of::<_keyboard_event_data>() - 2usize];
    ["Offset of field: _keyboard_event_data::keycode"]
        [::std::mem::offset_of!(_keyboard_event_data, keycode) - 0usize];
    ["Offset of field: _keyboard_event_data::rawcode"]
        [::std::mem::offset_of!(_keyboard_event_data, rawcode) - 2usize];
    ["Offset of field: _keyboard_event_data::keychar"]
        [::std::mem::offset_of!(_keyboard_event_data, keychar) - 4usize];
};
pub type keyboard_event_data = _keyboard_event_data;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _mouse_event_data {
    pub button: u16,
    pub clicks: u16,
    pub x: i16,
    pub y: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _mouse_event_data"][::std::mem::size_of::<_mouse_event_data>() - 8usize];
    ["Alignment of _mouse_event_data"][::std::mem::align_of::<_mouse_event_data>() - 2usize];
    ["Offset of field: _mouse_event_data::button"]
        [::std::mem::offset_of!(_mouse_event_data, button) - 0usize];
    ["Offset of field: _mouse_event_data::clicks"]
        [::std::mem::offset_of!(_mouse_event_data, clicks) - 2usize];
    ["Offset of field: _mouse_event_data::x"]
        [::std::mem::offset_of!(_mouse_event_data, x) - 4usize];
    ["Offset of field: _mouse_event_data::y"]
        [::std::mem::offset_of!(_mouse_event_data, y) - 6usize];
};
pub type mouse_event_data = _mouse_event_data;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _mouse_wheel_event_data {
    pub clicks: u16,
    pub x: i16,
    pub y: i16,
    pub type_: u8,
    pub amount: u16,
    pub rotation: i16,
    pub direction: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _mouse_wheel_event_data"][::std::mem::size_of::<_mouse_wheel_event_data>() - 14usize];
    ["Alignment of _mouse_wheel_event_data"]
        [::std::mem::align_of::<_mouse_wheel_event_data>() - 2usize];
    ["Offset of field: _mouse_wheel_event_data::clicks"]
        [::std::mem::offset_of!(_mouse_wheel_event_data, clicks) - 0usize];
    ["Offset of field: _mouse_wheel_event_data::x"]
        [::std::mem::offset_of!(_mouse_wheel_event_data, x) - 2usize];
    ["Offset of field: _mouse_wheel_event_data::y"]
        [::std::mem::offset_of!(_mouse_wheel_event_data, y) - 4usize];
    ["Offset of field: _mouse_wheel_event_data::type_"]
        [::std::mem::offset_of!(_mouse_wheel_event_data, type_) - 6usize];
    ["Offset of field: _mouse_wheel_event_data::amount"]
        [::std::mem::offset_of!(_mouse_wheel_event_data, amount) - 8usize];
    ["Offset of field: _mouse_wheel_event_data::rotation"]
        [::std::mem::offset_of!(_mouse_wheel_event_data, rotation) - 10usize];
    ["Offset of field: _mouse_wheel_event_data::direction"]
        [::std::mem::offset_of!(_mouse_wheel_event_data, direction) - 12usize];
};
pub type mouse_wheel_event_data = _mouse_wheel_event_data;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _uiohook_event {
    pub type_: event_type,
    pub time: u64,
    pub mask: u16,
    pub reserved: u16,
    pub data: _uiohook_event__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _uiohook_event__bindgen_ty_1 {
    pub keyboard: keyboard_event_data,
    pub mouse: mouse_event_data,
    pub wheel: mouse_wheel_event_data,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _uiohook_event__bindgen_ty_1"]
        [::std::mem::size_of::<_uiohook_event__bindgen_ty_1>() - 14usize];
    ["Alignment of _uiohook_event__bindgen_ty_1"]
        [::std::mem::align_of::<_uiohook_event__bindgen_ty_1>() - 2usize];
    ["Offset of field: _uiohook_event__bindgen_ty_1::keyboard"]
        [::std::mem::offset_of!(_uiohook_event__bindgen_ty_1, keyboard) - 0usize];
    ["Offset of field: _uiohook_event__bindgen_ty_1::mouse"]
        [::std::mem::offset_of!(_uiohook_event__bindgen_ty_1, mouse) - 0usize];
    ["Offset of field: _uiohook_event__bindgen_ty_1::wheel"]
        [::std::mem::offset_of!(_uiohook_event__bindgen_ty_1, wheel) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _uiohook_event"][::std::mem::size_of::<_uiohook_event>() - 40usize];
    ["Alignment of _uiohook_event"][::std::mem::align_of::<_uiohook_event>() - 8usize];
    ["Offset of field: _uiohook_event::type_"]
        [::std::mem::offset_of!(_uiohook_event, type_) - 0usize];
    ["Offset of field: _uiohook_event::time"]
        [::std::mem::offset_of!(_uiohook_event, time) - 8usize];
    ["Offset of field: _uiohook_event::mask"]
        [::std::mem::offset_of!(_uiohook_event, mask) - 16usize];
    ["Offset of field: _uiohook_event::reserved"]
        [::std::mem::offset_of!(_uiohook_event, reserved) - 18usize];
    ["Offset of field: _uiohook_event::data"]
        [::std::mem::offset_of!(_uiohook_event, data) - 20usize];
};
pub type uiohook_event = _uiohook_event;
pub type dispatcher_t = ::std::option::Option<unsafe extern "C" fn(arg1: *mut uiohook_event)>;
unsafe extern "C" {
    pub fn hook_set_logger_proc(logger_proc: logger_t);
}
unsafe extern "C" {
    pub fn hook_post_event(event: *mut uiohook_event);
}
unsafe extern "C" {
    pub fn hook_set_dispatch_proc(dispatch_proc: dispatcher_t);
}
unsafe extern "C" {
    pub fn hook_run() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn hook_stop() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn hook_create_screen_info(count: *mut ::std::os::raw::c_uchar) -> *mut screen_data;
}
unsafe extern "C" {
    pub fn hook_get_auto_repeat_rate() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn hook_get_auto_repeat_delay() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn hook_get_pointer_acceleration_multiplier() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn hook_get_pointer_acceleration_threshold() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn hook_get_pointer_sensitivity() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn hook_get_multi_click_time() -> ::std::os::raw::c_long;
}
